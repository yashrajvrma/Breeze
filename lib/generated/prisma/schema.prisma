// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sender {
  user
  assistant
}

enum MessageStatus {
  PENDING
  COMPLETED
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  name      String?
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Chat      Chat[]
  Favourite Favourite[]
  Message   Message[]

  @@map("user")
}

model Chat {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  title    String?
  isActive Boolean @default(true)

  favourite Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Message Message[]

  Favourite Favourite[]

  @@map("chat")
}

model Message {
  id String @id @default(uuid())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  sender  Sender
  content String
  status  MessageStatus @default(PENDING)

  orderIndex Int

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message")
}

model Favourite {
  id String @id @default(uuid())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favourite")
}
